//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AdvisementSys
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(program))]
    public partial class startdate: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int datecode
        {
            get { return _datecode; }
            set
            {
                if (_datecode != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'datecode' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _datecode = value;
                    OnPropertyChanged("datecode");
                }
            }
        }
        private int _datecode;
    
        [DataMember]
        public string programcode
        {
            get { return _programcode; }
            set
            {
                if (_programcode != value)
                {
                    ChangeTracker.RecordOriginalValue("programcode", _programcode);
                    if (!IsDeserializing)
                    {
                        if (program != null && program.programcode != value)
                        {
                            program = null;
                        }
                    }
                    _programcode = value;
                    OnPropertyChanged("programcode");
                }
            }
        }
        private string _programcode;
    
        [DataMember]
        public string startdate1
        {
            get { return _startdate1; }
            set
            {
                if (_startdate1 != value)
                {
                    _startdate1 = value;
                    OnPropertyChanged("startdate1");
                }
            }
        }
        private string _startdate1;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public program program
        {
            get { return _program; }
            set
            {
                if (!ReferenceEquals(_program, value))
                {
                    var previousValue = _program;
                    _program = value;
                    Fixupprogram(previousValue);
                    OnNavigationPropertyChanged("program");
                }
            }
        }
        private program _program;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            program = null;
        }

        #endregion
        #region Association Fixup
    
        private void Fixupprogram(program previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.startdates.Contains(this))
            {
                previousValue.startdates.Remove(this);
            }
    
            if (program != null)
            {
                if (!program.startdates.Contains(this))
                {
                    program.startdates.Add(this);
                }
    
                programcode = program.programcode;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("program")
                    && (ChangeTracker.OriginalValues["program"] == program))
                {
                    ChangeTracker.OriginalValues.Remove("program");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("program", previousValue);
                }
                if (program != null && !program.ChangeTracker.ChangeTrackingEnabled)
                {
                    program.StartTracking();
                }
            }
        }

        #endregion
    }
}
