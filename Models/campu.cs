//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AdvisementSys.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(appointment))]
    [KnownType(typeof(coordinator))]
    [KnownType(typeof(location))]
    [KnownType(typeof(professor))]
    [KnownType(typeof(student))]
    public partial class campu: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string cname
        {
            get { return _cname; }
            set
            {
                if (_cname != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'cname' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cname = value;
                    OnPropertyChanged("cname");
                }
            }
        }
        private string _cname;
    
        [DataMember]
        public string street
        {
            get { return _street; }
            set
            {
                if (_street != value)
                {
                    _street = value;
                    OnPropertyChanged("street");
                }
            }
        }
        private string _street;
    
        [DataMember]
        public string city
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
                    _city = value;
                    OnPropertyChanged("city");
                }
            }
        }
        private string _city;
    
        [DataMember]
        public string province
        {
            get { return _province; }
            set
            {
                if (_province != value)
                {
                    _province = value;
                    OnPropertyChanged("province");
                }
            }
        }
        private string _province;
    
        [DataMember]
        public string postalcode
        {
            get { return _postalcode; }
            set
            {
                if (_postalcode != value)
                {
                    _postalcode = value;
                    OnPropertyChanged("postalcode");
                }
            }
        }
        private string _postalcode;
    
        [DataMember]
        public bool archived
        {
            get { return _archived; }
            set
            {
                if (_archived != value)
                {
                    _archived = value;
                    OnPropertyChanged("archived");
                }
            }
        }
        private bool _archived;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<appointment> appointments
        {
            get
            {
                if (_appointments == null)
                {
                    _appointments = new TrackableCollection<appointment>();
                    _appointments.CollectionChanged += Fixupappointments;
                }
                return _appointments;
            }
            set
            {
                if (!ReferenceEquals(_appointments, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_appointments != null)
                    {
                        _appointments.CollectionChanged -= Fixupappointments;
                    }
                    _appointments = value;
                    if (_appointments != null)
                    {
                        _appointments.CollectionChanged += Fixupappointments;
                    }
                    OnNavigationPropertyChanged("appointments");
                }
            }
        }
        private TrackableCollection<appointment> _appointments;
    
        [DataMember]
        public TrackableCollection<coordinator> coordinators
        {
            get
            {
                if (_coordinators == null)
                {
                    _coordinators = new TrackableCollection<coordinator>();
                    _coordinators.CollectionChanged += Fixupcoordinators;
                }
                return _coordinators;
            }
            set
            {
                if (!ReferenceEquals(_coordinators, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_coordinators != null)
                    {
                        _coordinators.CollectionChanged -= Fixupcoordinators;
                    }
                    _coordinators = value;
                    if (_coordinators != null)
                    {
                        _coordinators.CollectionChanged += Fixupcoordinators;
                    }
                    OnNavigationPropertyChanged("coordinators");
                }
            }
        }
        private TrackableCollection<coordinator> _coordinators;
    
        [DataMember]
        public TrackableCollection<location> locations
        {
            get
            {
                if (_locations == null)
                {
                    _locations = new TrackableCollection<location>();
                    _locations.CollectionChanged += Fixuplocations;
                }
                return _locations;
            }
            set
            {
                if (!ReferenceEquals(_locations, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_locations != null)
                    {
                        _locations.CollectionChanged -= Fixuplocations;
                    }
                    _locations = value;
                    if (_locations != null)
                    {
                        _locations.CollectionChanged += Fixuplocations;
                    }
                    OnNavigationPropertyChanged("locations");
                }
            }
        }
        private TrackableCollection<location> _locations;
    
        [DataMember]
        public TrackableCollection<professor> professors
        {
            get
            {
                if (_professors == null)
                {
                    _professors = new TrackableCollection<professor>();
                    _professors.CollectionChanged += Fixupprofessors;
                }
                return _professors;
            }
            set
            {
                if (!ReferenceEquals(_professors, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_professors != null)
                    {
                        _professors.CollectionChanged -= Fixupprofessors;
                    }
                    _professors = value;
                    if (_professors != null)
                    {
                        _professors.CollectionChanged += Fixupprofessors;
                    }
                    OnNavigationPropertyChanged("professors");
                }
            }
        }
        private TrackableCollection<professor> _professors;
    
        [DataMember]
        public TrackableCollection<student> students
        {
            get
            {
                if (_students == null)
                {
                    _students = new TrackableCollection<student>();
                    _students.CollectionChanged += Fixupstudents;
                }
                return _students;
            }
            set
            {
                if (!ReferenceEquals(_students, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_students != null)
                    {
                        _students.CollectionChanged -= Fixupstudents;
                    }
                    _students = value;
                    if (_students != null)
                    {
                        _students.CollectionChanged += Fixupstudents;
                    }
                    OnNavigationPropertyChanged("students");
                }
            }
        }
        private TrackableCollection<student> _students;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            appointments.Clear();
            coordinators.Clear();
            locations.Clear();
            professors.Clear();
            students.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void Fixupappointments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (appointment item in e.NewItems)
                {
                    item.campu = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("appointments", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (appointment item in e.OldItems)
                {
                    if (ReferenceEquals(item.campu, this))
                    {
                        item.campu = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("appointments", item);
                    }
                }
            }
        }
    
        private void Fixupcoordinators(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (coordinator item in e.NewItems)
                {
                    item.campu = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("coordinators", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (coordinator item in e.OldItems)
                {
                    if (ReferenceEquals(item.campu, this))
                    {
                        item.campu = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("coordinators", item);
                    }
                }
            }
        }
    
        private void Fixuplocations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (location item in e.NewItems)
                {
                    item.campu = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("locations", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (location item in e.OldItems)
                {
                    if (ReferenceEquals(item.campu, this))
                    {
                        item.campu = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("locations", item);
                    }
                }
            }
        }
    
        private void Fixupprofessors(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (professor item in e.NewItems)
                {
                    item.campu = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("professors", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (professor item in e.OldItems)
                {
                    if (ReferenceEquals(item.campu, this))
                    {
                        item.campu = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("professors", item);
                    }
                }
            }
        }
    
        private void Fixupstudents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (student item in e.NewItems)
                {
                    item.campu = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("students", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (student item in e.OldItems)
                {
                    if (ReferenceEquals(item.campu, this))
                    {
                        item.campu = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("students", item);
                    }
                }
            }
        }

        #endregion
    }
}
