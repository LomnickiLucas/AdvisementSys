//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AdvisementSys.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(campu))]
    [KnownType(typeof(employee))]
    [KnownType(typeof(Attendee))]
    public partial class appointment: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid appointmentid
        {
            get { return _appointmentid; }
            set
            {
                if (_appointmentid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'appointmentid' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _appointmentid = value;
                    OnPropertyChanged("appointmentid");
                }
            }
        }
        private System.Guid _appointmentid;
    
        [DataMember]
        public System.DateTime starttime
        {
            get { return _starttime; }
            set
            {
                if (_starttime != value)
                {
                    _starttime = value;
                    OnPropertyChanged("starttime");
                }
            }
        }
        private System.DateTime _starttime;
    
        [DataMember]
        public System.DateTime endtime
        {
            get { return _endtime; }
            set
            {
                if (_endtime != value)
                {
                    _endtime = value;
                    OnPropertyChanged("endtime");
                }
            }
        }
        private System.DateTime _endtime;
    
        [DataMember]
        public string subject
        {
            get { return _subject; }
            set
            {
                if (_subject != value)
                {
                    _subject = value;
                    OnPropertyChanged("subject");
                }
            }
        }
        private string _subject;
    
        [DataMember]
        public string description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string employeeid
        {
            get { return _employeeid; }
            set
            {
                if (_employeeid != value)
                {
                    ChangeTracker.RecordOriginalValue("employeeid", _employeeid);
                    if (!IsDeserializing)
                    {
                        if (employee != null && employee.employeeid != value)
                        {
                            employee = null;
                        }
                    }
                    _employeeid = value;
                    OnPropertyChanged("employeeid");
                }
            }
        }
        private string _employeeid;
    
        [DataMember]
        public string cname
        {
            get { return _cname; }
            set
            {
                if (_cname != value)
                {
                    ChangeTracker.RecordOriginalValue("cname", _cname);
                    if (!IsDeserializing)
                    {
                        if (campu != null && campu.cname != value)
                        {
                            campu = null;
                        }
                    }
                    _cname = value;
                    OnPropertyChanged("cname");
                }
            }
        }
        private string _cname;
    
        [DataMember]
        public string appointmenttype
        {
            get { return _appointmenttype; }
            set
            {
                if (_appointmenttype != value)
                {
                    _appointmenttype = value;
                    OnPropertyChanged("appointmenttype");
                }
            }
        }
        private string _appointmenttype;
    
        [DataMember]
        public bool allday
        {
            get { return _allday; }
            set
            {
                if (_allday != value)
                {
                    _allday = value;
                    OnPropertyChanged("allday");
                }
            }
        }
        private bool _allday;
    
        [DataMember]
        public Nullable<System.Guid> repeating
        {
            get { return _repeating; }
            set
            {
                if (_repeating != value)
                {
                    _repeating = value;
                    OnPropertyChanged("repeating");
                }
            }
        }
        private Nullable<System.Guid> _repeating;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public campu campu
        {
            get { return _campu; }
            set
            {
                if (!ReferenceEquals(_campu, value))
                {
                    var previousValue = _campu;
                    _campu = value;
                    Fixupcampu(previousValue);
                    OnNavigationPropertyChanged("campu");
                }
            }
        }
        private campu _campu;
    
        [DataMember]
        public employee employee
        {
            get { return _employee; }
            set
            {
                if (!ReferenceEquals(_employee, value))
                {
                    var previousValue = _employee;
                    _employee = value;
                    Fixupemployee(previousValue);
                    OnNavigationPropertyChanged("employee");
                }
            }
        }
        private employee _employee;
    
        [DataMember]
        public TrackableCollection<Attendee> Attendees
        {
            get
            {
                if (_attendees == null)
                {
                    _attendees = new TrackableCollection<Attendee>();
                    _attendees.CollectionChanged += FixupAttendees;
                }
                return _attendees;
            }
            set
            {
                if (!ReferenceEquals(_attendees, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_attendees != null)
                    {
                        _attendees.CollectionChanged -= FixupAttendees;
                    }
                    _attendees = value;
                    if (_attendees != null)
                    {
                        _attendees.CollectionChanged += FixupAttendees;
                    }
                    OnNavigationPropertyChanged("Attendees");
                }
            }
        }
        private TrackableCollection<Attendee> _attendees;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            campu = null;
            employee = null;
            Attendees.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void Fixupcampu(campu previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.appointments.Contains(this))
            {
                previousValue.appointments.Remove(this);
            }
    
            if (campu != null)
            {
                if (!campu.appointments.Contains(this))
                {
                    campu.appointments.Add(this);
                }
    
                cname = campu.cname;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("campu")
                    && (ChangeTracker.OriginalValues["campu"] == campu))
                {
                    ChangeTracker.OriginalValues.Remove("campu");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("campu", previousValue);
                }
                if (campu != null && !campu.ChangeTracker.ChangeTrackingEnabled)
                {
                    campu.StartTracking();
                }
            }
        }
    
        private void Fixupemployee(employee previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.appointments.Contains(this))
            {
                previousValue.appointments.Remove(this);
            }
    
            if (employee != null)
            {
                if (!employee.appointments.Contains(this))
                {
                    employee.appointments.Add(this);
                }
    
                employeeid = employee.employeeid;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("employee")
                    && (ChangeTracker.OriginalValues["employee"] == employee))
                {
                    ChangeTracker.OriginalValues.Remove("employee");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("employee", previousValue);
                }
                if (employee != null && !employee.ChangeTracker.ChangeTrackingEnabled)
                {
                    employee.StartTracking();
                }
            }
        }
    
        private void FixupAttendees(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Attendee item in e.NewItems)
                {
                    item.appointment = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Attendees", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Attendee item in e.OldItems)
                {
                    if (ReferenceEquals(item.appointment, this))
                    {
                        item.appointment = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Attendees", item);
                    }
                }
            }
        }

        #endregion
    }
}
