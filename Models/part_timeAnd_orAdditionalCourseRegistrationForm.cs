//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AdvisementSys.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(issue))]
    public partial class part_timeAnd_orAdditionalCourseRegistrationForm: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid registrationid
        {
            get { return _registrationid; }
            set
            {
                if (_registrationid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'registrationid' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _registrationid = value;
                    OnPropertyChanged("registrationid");
                }
            }
        }
        private System.Guid _registrationid;
    
        [DataMember]
        public System.Guid issueid
        {
            get { return _issueid; }
            set
            {
                if (_issueid != value)
                {
                    ChangeTracker.RecordOriginalValue("issueid", _issueid);
                    if (!IsDeserializing)
                    {
                        if (issue != null && issue.issueid != value)
                        {
                            issue = null;
                        }
                    }
                    _issueid = value;
                    OnPropertyChanged("issueid");
                }
            }
        }
        private System.Guid _issueid;
    
        [DataMember]
        public System.DateTime date
        {
            get { return _date; }
            set
            {
                if (_date != value)
                {
                    _date = value;
                    OnPropertyChanged("date");
                }
            }
        }
        private System.DateTime _date;
    
        [DataMember]
        public string coursecode
        {
            get { return _coursecode; }
            set
            {
                if (_coursecode != value)
                {
                    _coursecode = value;
                    OnPropertyChanged("coursecode");
                }
            }
        }
        private string _coursecode;
    
        [DataMember]
        public decimal coursecharges
        {
            get { return _coursecharges; }
            set
            {
                if (_coursecharges != value)
                {
                    _coursecharges = value;
                    OnPropertyChanged("coursecharges");
                }
            }
        }
        private decimal _coursecharges;
    
        [DataMember]
        public decimal matfees
        {
            get { return _matfees; }
            set
            {
                if (_matfees != value)
                {
                    _matfees = value;
                    OnPropertyChanged("matfees");
                }
            }
        }
        private decimal _matfees;
    
        [DataMember]
        public decimal compcharges
        {
            get { return _compcharges; }
            set
            {
                if (_compcharges != value)
                {
                    _compcharges = value;
                    OnPropertyChanged("compcharges");
                }
            }
        }
        private decimal _compcharges;
    
        [DataMember]
        public string status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("status");
                }
            }
        }
        private string _status;
    
        [DataMember]
        public int term
        {
            get { return _term; }
            set
            {
                if (_term != value)
                {
                    _term = value;
                    OnPropertyChanged("term");
                }
            }
        }
        private int _term;
    
        [DataMember]
        public string clsnum
        {
            get { return _clsnum; }
            set
            {
                if (_clsnum != value)
                {
                    _clsnum = value;
                    OnPropertyChanged("clsnum");
                }
            }
        }
        private string _clsnum;
    
        [DataMember]
        public decimal creditvalue
        {
            get { return _creditvalue; }
            set
            {
                if (_creditvalue != value)
                {
                    _creditvalue = value;
                    OnPropertyChanged("creditvalue");
                }
            }
        }
        private decimal _creditvalue;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public issue issue
        {
            get { return _issue; }
            set
            {
                if (!ReferenceEquals(_issue, value))
                {
                    var previousValue = _issue;
                    _issue = value;
                    Fixupissue(previousValue);
                    OnNavigationPropertyChanged("issue");
                }
            }
        }
        private issue _issue;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            issue = null;
        }

        #endregion
        #region Association Fixup
    
        private void Fixupissue(issue previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.part_timeAnd_orAdditionalCourseRegistrationForm.Contains(this))
            {
                previousValue.part_timeAnd_orAdditionalCourseRegistrationForm.Remove(this);
            }
    
            if (issue != null)
            {
                if (!issue.part_timeAnd_orAdditionalCourseRegistrationForm.Contains(this))
                {
                    issue.part_timeAnd_orAdditionalCourseRegistrationForm.Add(this);
                }
    
                issueid = issue.issueid;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("issue")
                    && (ChangeTracker.OriginalValues["issue"] == issue))
                {
                    ChangeTracker.OriginalValues.Remove("issue");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("issue", previousValue);
                }
                if (issue != null && !issue.ChangeTracker.ChangeTrackingEnabled)
                {
                    issue.StartTracking();
                }
            }
        }

        #endregion
    }
}
