//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AdvisementSys.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(designation))]
    [KnownType(typeof(faculty))]
    [KnownType(typeof(location))]
    [KnownType(typeof(student))]
    [KnownType(typeof(course))]
    public partial class program: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string programcode
        {
            get { return _programcode; }
            set
            {
                if (_programcode != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'programcode' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _programcode = value;
                    OnPropertyChanged("programcode");
                }
            }
        }
        private string _programcode;
    
        [DataMember]
        public string programname
        {
            get { return _programname; }
            set
            {
                if (_programname != value)
                {
                    _programname = value;
                    OnPropertyChanged("programname");
                }
            }
        }
        private string _programname;
    
        [DataMember]
        public string faculty
        {
            get { return _faculty; }
            set
            {
                if (_faculty != value)
                {
                    ChangeTracker.RecordOriginalValue("faculty", _faculty);
                    if (!IsDeserializing)
                    {
                        if (faculty1 != null && faculty1.fname != value)
                        {
                            faculty1 = null;
                        }
                    }
                    _faculty = value;
                    OnPropertyChanged("faculty");
                }
            }
        }
        private string _faculty;
    
        [DataMember]
        public string designation
        {
            get { return _designation; }
            set
            {
                if (_designation != value)
                {
                    ChangeTracker.RecordOriginalValue("designation", _designation);
                    if (!IsDeserializing)
                    {
                        if (designation1 != null && designation1.title != value)
                        {
                            designation1 = null;
                        }
                    }
                    _designation = value;
                    OnPropertyChanged("designation");
                }
            }
        }
        private string _designation;
    
        [DataMember]
        public string employeeid
        {
            get { return _employeeid; }
            set
            {
                if (_employeeid != value)
                {
                    _employeeid = value;
                    OnPropertyChanged("employeeid");
                }
            }
        }
        private string _employeeid;
    
        [DataMember]
        public string description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string requirements
        {
            get { return _requirements; }
            set
            {
                if (_requirements != value)
                {
                    _requirements = value;
                    OnPropertyChanged("requirements");
                }
            }
        }
        private string _requirements;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public designation designation1
        {
            get { return _designation1; }
            set
            {
                if (!ReferenceEquals(_designation1, value))
                {
                    var previousValue = _designation1;
                    _designation1 = value;
                    Fixupdesignation1(previousValue);
                    OnNavigationPropertyChanged("designation1");
                }
            }
        }
        private designation _designation1;
    
        [DataMember]
        public faculty faculty1
        {
            get { return _faculty1; }
            set
            {
                if (!ReferenceEquals(_faculty1, value))
                {
                    var previousValue = _faculty1;
                    _faculty1 = value;
                    Fixupfaculty1(previousValue);
                    OnNavigationPropertyChanged("faculty1");
                }
            }
        }
        private faculty _faculty1;
    
        [DataMember]
        public TrackableCollection<location> locations
        {
            get
            {
                if (_locations == null)
                {
                    _locations = new TrackableCollection<location>();
                    _locations.CollectionChanged += Fixuplocations;
                }
                return _locations;
            }
            set
            {
                if (!ReferenceEquals(_locations, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_locations != null)
                    {
                        _locations.CollectionChanged -= Fixuplocations;
                    }
                    _locations = value;
                    if (_locations != null)
                    {
                        _locations.CollectionChanged += Fixuplocations;
                    }
                    OnNavigationPropertyChanged("locations");
                }
            }
        }
        private TrackableCollection<location> _locations;
    
        [DataMember]
        public TrackableCollection<student> students
        {
            get
            {
                if (_students == null)
                {
                    _students = new TrackableCollection<student>();
                    _students.CollectionChanged += Fixupstudents;
                }
                return _students;
            }
            set
            {
                if (!ReferenceEquals(_students, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_students != null)
                    {
                        _students.CollectionChanged -= Fixupstudents;
                    }
                    _students = value;
                    if (_students != null)
                    {
                        _students.CollectionChanged += Fixupstudents;
                    }
                    OnNavigationPropertyChanged("students");
                }
            }
        }
        private TrackableCollection<student> _students;
    
        [DataMember]
        public TrackableCollection<course> courses
        {
            get
            {
                if (_courses == null)
                {
                    _courses = new TrackableCollection<course>();
                    _courses.CollectionChanged += Fixupcourses;
                }
                return _courses;
            }
            set
            {
                if (!ReferenceEquals(_courses, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_courses != null)
                    {
                        _courses.CollectionChanged -= Fixupcourses;
                    }
                    _courses = value;
                    if (_courses != null)
                    {
                        _courses.CollectionChanged += Fixupcourses;
                    }
                    OnNavigationPropertyChanged("courses");
                }
            }
        }
        private TrackableCollection<course> _courses;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            designation1 = null;
            faculty1 = null;
            locations.Clear();
            students.Clear();
            courses.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void Fixupdesignation1(designation previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.programs.Contains(this))
            {
                previousValue.programs.Remove(this);
            }
    
            if (designation1 != null)
            {
                if (!designation1.programs.Contains(this))
                {
                    designation1.programs.Add(this);
                }
    
                designation = designation1.title;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("designation1")
                    && (ChangeTracker.OriginalValues["designation1"] == designation1))
                {
                    ChangeTracker.OriginalValues.Remove("designation1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("designation1", previousValue);
                }
                if (designation1 != null && !designation1.ChangeTracker.ChangeTrackingEnabled)
                {
                    designation1.StartTracking();
                }
            }
        }
    
        private void Fixupfaculty1(faculty previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.programs.Contains(this))
            {
                previousValue.programs.Remove(this);
            }
    
            if (faculty1 != null)
            {
                if (!faculty1.programs.Contains(this))
                {
                    faculty1.programs.Add(this);
                }
    
                faculty = faculty1.fname;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("faculty1")
                    && (ChangeTracker.OriginalValues["faculty1"] == faculty1))
                {
                    ChangeTracker.OriginalValues.Remove("faculty1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("faculty1", previousValue);
                }
                if (faculty1 != null && !faculty1.ChangeTracker.ChangeTrackingEnabled)
                {
                    faculty1.StartTracking();
                }
            }
        }
    
        private void Fixuplocations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (location item in e.NewItems)
                {
                    item.program = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("locations", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (location item in e.OldItems)
                {
                    if (ReferenceEquals(item.program, this))
                    {
                        item.program = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("locations", item);
                    }
                }
            }
        }
    
        private void Fixupstudents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (student item in e.NewItems)
                {
                    item.program = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("students", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (student item in e.OldItems)
                {
                    if (ReferenceEquals(item.program, this))
                    {
                        item.program = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("students", item);
                    }
                }
            }
        }
    
        private void Fixupcourses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (course item in e.NewItems)
                {
                    if (!item.programs.Contains(this))
                    {
                        item.programs.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("courses", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (course item in e.OldItems)
                {
                    if (item.programs.Contains(this))
                    {
                        item.programs.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("courses", item);
                    }
                }
            }
        }

        #endregion
    }
}
