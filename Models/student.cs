//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AdvisementSys.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(appointment))]
    [KnownType(typeof(campu))]
    [KnownType(typeof(issue))]
    [KnownType(typeof(program))]
    public partial class student: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string studentid
        {
            get { return _studentid; }
            set
            {
                if (_studentid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'studentid' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _studentid = value;
                    OnPropertyChanged("studentid");
                }
            }
        }
        private string _studentid;
    
        [DataMember]
        public string fname
        {
            get { return _fname; }
            set
            {
                if (_fname != value)
                {
                    _fname = value;
                    OnPropertyChanged("fname");
                }
            }
        }
        private string _fname;
    
        [DataMember]
        public string lname
        {
            get { return _lname; }
            set
            {
                if (_lname != value)
                {
                    _lname = value;
                    OnPropertyChanged("lname");
                }
            }
        }
        private string _lname;
    
        [DataMember]
        public string programcode
        {
            get { return _programcode; }
            set
            {
                if (_programcode != value)
                {
                    ChangeTracker.RecordOriginalValue("programcode", _programcode);
                    if (!IsDeserializing)
                    {
                        if (program != null && program.programcode != value)
                        {
                            program = null;
                        }
                    }
                    _programcode = value;
                    OnPropertyChanged("programcode");
                }
            }
        }
        private string _programcode;
    
        [DataMember]
        public string campus
        {
            get { return _campus; }
            set
            {
                if (_campus != value)
                {
                    ChangeTracker.RecordOriginalValue("campus", _campus);
                    if (!IsDeserializing)
                    {
                        if (campu != null && campu.cname != value)
                        {
                            campu = null;
                        }
                    }
                    _campus = value;
                    OnPropertyChanged("campus");
                }
            }
        }
        private string _campus;
    
        [DataMember]
        public string phonenum
        {
            get { return _phonenum; }
            set
            {
                if (_phonenum != value)
                {
                    _phonenum = value;
                    OnPropertyChanged("phonenum");
                }
            }
        }
        private string _phonenum;
    
        [DataMember]
        public string email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public string street
        {
            get { return _street; }
            set
            {
                if (_street != value)
                {
                    _street = value;
                    OnPropertyChanged("street");
                }
            }
        }
        private string _street;
    
        [DataMember]
        public string appartmentnum
        {
            get { return _appartmentnum; }
            set
            {
                if (_appartmentnum != value)
                {
                    _appartmentnum = value;
                    OnPropertyChanged("appartmentnum");
                }
            }
        }
        private string _appartmentnum;
    
        [DataMember]
        public string city
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
                    _city = value;
                    OnPropertyChanged("city");
                }
            }
        }
        private string _city;
    
        [DataMember]
        public string province
        {
            get { return _province; }
            set
            {
                if (_province != value)
                {
                    _province = value;
                    OnPropertyChanged("province");
                }
            }
        }
        private string _province;
    
        [DataMember]
        public string postalcode
        {
            get { return _postalcode; }
            set
            {
                if (_postalcode != value)
                {
                    _postalcode = value;
                    OnPropertyChanged("postalcode");
                }
            }
        }
        private string _postalcode;
    
        [DataMember]
        public bool acadprobation
        {
            get { return _acadprobation; }
            set
            {
                if (_acadprobation != value)
                {
                    _acadprobation = value;
                    OnPropertyChanged("acadprobation");
                }
            }
        }
        private bool _acadprobation;
    
        [DataMember]
        public bool fulltimestatus
        {
            get { return _fulltimestatus; }
            set
            {
                if (_fulltimestatus != value)
                {
                    _fulltimestatus = value;
                    OnPropertyChanged("fulltimestatus");
                }
            }
        }
        private bool _fulltimestatus;
    
        [DataMember]
        public bool enrolled
        {
            get { return _enrolled; }
            set
            {
                if (_enrolled != value)
                {
                    _enrolled = value;
                    OnPropertyChanged("enrolled");
                }
            }
        }
        private bool _enrolled;
    
        [DataMember]
        public bool international
        {
            get { return _international; }
            set
            {
                if (_international != value)
                {
                    _international = value;
                    OnPropertyChanged("international");
                }
            }
        }
        private bool _international;
    
        [DataMember]
        public string cellnum
        {
            get { return _cellnum; }
            set
            {
                if (_cellnum != value)
                {
                    _cellnum = value;
                    OnPropertyChanged("cellnum");
                }
            }
        }
        private string _cellnum;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<appointment> appointments
        {
            get
            {
                if (_appointments == null)
                {
                    _appointments = new TrackableCollection<appointment>();
                    _appointments.CollectionChanged += Fixupappointments;
                }
                return _appointments;
            }
            set
            {
                if (!ReferenceEquals(_appointments, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_appointments != null)
                    {
                        _appointments.CollectionChanged -= Fixupappointments;
                    }
                    _appointments = value;
                    if (_appointments != null)
                    {
                        _appointments.CollectionChanged += Fixupappointments;
                    }
                    OnNavigationPropertyChanged("appointments");
                }
            }
        }
        private TrackableCollection<appointment> _appointments;
    
        [DataMember]
        public campu campu
        {
            get { return _campu; }
            set
            {
                if (!ReferenceEquals(_campu, value))
                {
                    var previousValue = _campu;
                    _campu = value;
                    Fixupcampu(previousValue);
                    OnNavigationPropertyChanged("campu");
                }
            }
        }
        private campu _campu;
    
        [DataMember]
        public TrackableCollection<issue> issues
        {
            get
            {
                if (_issues == null)
                {
                    _issues = new TrackableCollection<issue>();
                    _issues.CollectionChanged += Fixupissues;
                }
                return _issues;
            }
            set
            {
                if (!ReferenceEquals(_issues, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_issues != null)
                    {
                        _issues.CollectionChanged -= Fixupissues;
                    }
                    _issues = value;
                    if (_issues != null)
                    {
                        _issues.CollectionChanged += Fixupissues;
                    }
                    OnNavigationPropertyChanged("issues");
                }
            }
        }
        private TrackableCollection<issue> _issues;
    
        [DataMember]
        public program program
        {
            get { return _program; }
            set
            {
                if (!ReferenceEquals(_program, value))
                {
                    var previousValue = _program;
                    _program = value;
                    Fixupprogram(previousValue);
                    OnNavigationPropertyChanged("program");
                }
            }
        }
        private program _program;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            appointments.Clear();
            campu = null;
            issues.Clear();
            program = null;
        }

        #endregion
        #region Association Fixup
    
        private void Fixupcampu(campu previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.students.Contains(this))
            {
                previousValue.students.Remove(this);
            }
    
            if (campu != null)
            {
                if (!campu.students.Contains(this))
                {
                    campu.students.Add(this);
                }
    
                campus = campu.cname;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("campu")
                    && (ChangeTracker.OriginalValues["campu"] == campu))
                {
                    ChangeTracker.OriginalValues.Remove("campu");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("campu", previousValue);
                }
                if (campu != null && !campu.ChangeTracker.ChangeTrackingEnabled)
                {
                    campu.StartTracking();
                }
            }
        }
    
        private void Fixupprogram(program previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.students.Contains(this))
            {
                previousValue.students.Remove(this);
            }
    
            if (program != null)
            {
                if (!program.students.Contains(this))
                {
                    program.students.Add(this);
                }
    
                programcode = program.programcode;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("program")
                    && (ChangeTracker.OriginalValues["program"] == program))
                {
                    ChangeTracker.OriginalValues.Remove("program");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("program", previousValue);
                }
                if (program != null && !program.ChangeTracker.ChangeTrackingEnabled)
                {
                    program.StartTracking();
                }
            }
        }
    
        private void Fixupappointments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (appointment item in e.NewItems)
                {
                    item.student = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("appointments", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (appointment item in e.OldItems)
                {
                    if (ReferenceEquals(item.student, this))
                    {
                        item.student = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("appointments", item);
                    }
                }
            }
        }
    
        private void Fixupissues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (issue item in e.NewItems)
                {
                    item.student = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("issues", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (issue item in e.OldItems)
                {
                    if (ReferenceEquals(item.student, this))
                    {
                        item.student = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("issues", item);
                    }
                }
            }
        }

        #endregion
    }
}
